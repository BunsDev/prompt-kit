{
  "name": "tool",
  "type": "registry:ui",
  "dependencies": ["@/components/ui/button", "@/components/ui/collapsible"],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "name": "tool.tsx",
      "content": "\"use client\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\"\nimport { ChevronDown, Settings, Loader2, CheckCircle } from \"lucide-react\"\nimport { useState } from \"react\"\n\nexport type ToolInvocation = {\n  toolName: string\n  state: \"pending\" | \"running\" | \"completed\" | \"error\"\n  args?: Record<string, unknown>\n  result?: unknown\n  error?: string\n}\n\nexport type ToolProps = {\n  toolInvocation: ToolInvocation\n  defaultOpen?: boolean\n  className?: string\n}\n\nconst Tool = ({ toolInvocation, defaultOpen = false, className }: ToolProps) => {\n  const [isOpen, setIsOpen] = useState(defaultOpen)\n  const { toolName, state, args, result, error } = toolInvocation\n\n  const getStateIcon = () => {\n    switch (state) {\n      case \"running\":\n        return <Loader2 className=\"h-4 w-4 animate-spin text-blue-500\" />\n      case \"completed\":\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />\n      case \"error\":\n        return <CheckCircle className=\"h-4 w-4 text-red-500\" />\n      default:\n        return <Settings className=\"text-muted-foreground h-4 w-4\" />\n    }\n  }\n\n  const getStateBadge = () => {\n    const baseClasses = \"px-2 py-1 rounded-full text-xs font-medium\"\n    switch (state) {\n      case \"running\":\n        return (\n          <span\n            className={cn(\n              baseClasses,\n              \"bg-blue-100 text-blue-700 dark:bg-blue-900/30 dark:text-blue-400\"\n            )}\n          >\n            Running\n          </span>\n        )\n      case \"completed\":\n        return (\n          <span\n            className={cn(\n              baseClasses,\n              \"bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-400\"\n            )}\n          >\n            Completed\n          </span>\n        )\n      case \"error\":\n        return (\n          <span\n            className={cn(\n              baseClasses,\n              \"bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-400\"\n            )}\n          >\n            Error\n          </span>\n        )\n      default:\n        return (\n          <span\n            className={cn(\n              baseClasses,\n              \"bg-gray-100 text-gray-700 dark:bg-gray-900/30 dark:text-gray-400\"\n            )}\n          >\n            Pending\n          </span>\n        )\n    }\n  }\n\n  const formatValue = (value: unknown): string => {\n    if (value === null) return \"null\"\n    if (value === undefined) return \"undefined\"\n    if (typeof value === \"string\") return value\n    if (typeof value === \"object\") {\n      return JSON.stringify(value, null, 2)\n    }\n    return String(value)\n  }\n\n  return (\n    <div className={cn(\"rounded-lg border\", className)}>\n      <Collapsible open={isOpen} onOpenChange={setIsOpen}>\n        <CollapsibleTrigger asChild>\n          <Button\n            variant=\"ghost\"\n            className=\"h-auto w-full justify-between p-3 font-normal\"\n          >\n            <div className=\"flex items-center gap-2\">\n              {getStateIcon()}\n              <span className=\"font-mono text-sm\">{toolName}</span>\n              {getStateBadge()}\n            </div>\n            <ChevronDown\n              className={cn(\n                \"h-4 w-4 transition-transform\",\n                isOpen && \"rotate-180\"\n              )}\n            />\n          </Button>\n        </CollapsibleTrigger>\n        <CollapsibleContent className=\"border-t\">\n          <div className=\"space-y-3 p-3\">\n            {args && Object.keys(args).length > 0 && (\n              <div>\n                <h4 className=\"text-muted-foreground mb-2 text-sm font-medium\">\n                  Arguments\n                </h4>\n                <div className=\"bg-muted rounded p-2 font-mono text-sm\">\n                  {Object.entries(args).map(([key, value]) => (\n                    <div key={key} className=\"mb-1\">\n                      <span className=\"text-muted-foreground\">{key}:</span>{\" \"}\n                      <span>{formatValue(value)}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {result && (\n              <div>\n                <h4 className=\"text-muted-foreground mb-2 text-sm font-medium\">\n                  Result\n                </h4>\n                <div className=\"bg-muted max-h-60 overflow-auto rounded p-2 font-mono text-sm\">\n                  <pre className=\"whitespace-pre-wrap\">\n                    {formatValue(result)}\n                  </pre>\n                </div>\n              </div>\n            )}\n\n            {error && (\n              <div>\n                <h4 className=\"mb-2 text-sm font-medium text-red-500\">Error</h4>\n                <div className=\"rounded border border-red-200 bg-red-50 p-2 text-sm dark:border-red-800 dark:bg-red-900/20\">\n                  {error}\n                </div>\n              </div>\n            )}\n          </div>\n        </CollapsibleContent>\n      </Collapsible>\n    </div>\n  )\n}\n\nexport type ToolGroupProps = {\n  tools: ToolInvocation[]\n  defaultOpen?: boolean\n  className?: string\n  title?: string\n}\n\nconst ToolGroup = ({\n  tools,\n  defaultOpen = false,\n  className,\n  title = \"Tools\",\n}: ToolGroupProps) => {\n  const [isOpen, setIsOpen] = useState(defaultOpen)\n\n  if (tools.length === 0) return null\n\n  if (tools.length === 1) {\n    return (\n      <Tool\n        toolInvocation={tools[0]}\n        defaultOpen={defaultOpen}\n        className={className}\n      />\n    )\n  }\n\n  return (\n    <div className={cn(\"rounded-lg border\", className)}>\n      <Collapsible open={isOpen} onOpenChange={setIsOpen}>\n        <CollapsibleTrigger asChild>\n          <Button\n            variant=\"ghost\"\n            className=\"h-auto w-full justify-between p-3 font-normal\"\n          >\n            <div className=\"flex items-center gap-2\">\n              <Settings className=\"text-muted-foreground h-4 w-4\" />\n              <span className=\"text-sm\">{title}</span>\n              <span className=\"bg-muted text-muted-foreground rounded-full px-2 py-1 font-mono text-xs\">\n                {tools.length}\n              </span>\n            </div>\n            <ChevronDown\n              className={cn(\n                \"h-4 w-4 transition-transform\",\n                isOpen && \"rotate-180\"\n              )}\n            />\n          </Button>\n        </CollapsibleTrigger>\n        <CollapsibleContent className=\"border-t\">\n          <div className=\"space-y-2 p-3\">\n            {tools.map((tool, index) => (\n              <Tool\n                key={`${tool.toolName}-${index}`}\n                toolInvocation={tool}\n                defaultOpen={false}\n              />\n            ))}\n          </div>\n        </CollapsibleContent>\n      </Collapsible>\n    </div>\n  )\n}\n\nexport { Tool, ToolGroup }"
    }
  ]
}
